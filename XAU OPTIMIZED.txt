//+------------------------------------------------------------------+
//|                                        XAU_USD_Advanced_EA.mq4     |
//|                                Copyright 2025, Strabogianno        |
//|                            Last Updated: 2025-05-10 06:58:22       |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Strabogianno"
#property link      ""
#property version   "2.00"
#property strict

#define MAGIC_NUMBER 20250510
#define EA_NAME "XAU/USD Advanced EA ML"

// Initial Account Settings
#define INITIAL_BALANCE 4000.0   // Starting balance in EUR
#define MAX_INITIAL_LOTS 0.20    // Maximum starting lots for 4000 EUR

// External Parameters
extern string S1 = "=== Risk Management Settings ===";
extern double RiskPercent = 2.0;           
extern double MaxDailyRisk = 6.0;          
extern double MaxSpread = 35;              
extern int MaxPositions = 1;               

extern string S2 = "=== Timeframe Settings ===";
extern ENUM_TIMEFRAMES PrimaryTimeframe = PERIOD_H1;

extern string S3 = "=== Trading Sessions ===";
extern bool FilterBySession = true;         
extern bool TradeAsianSession = true;       
extern bool TradeLondonSession = true;      
extern bool TradeNewYorkSession = true;     

extern string S4 = "=== Stop Management ===";
extern bool UseBreakEven = true;           
extern double BreakEvenActivation = 1.5;    
extern double BreakEvenProfit = 0.5;        
extern bool UseTrailingStop = true;         
extern double TrailingActivation = 2.0;     
extern double TrailingDistance = 1.0;       

extern string S5 = "=== ML Parameters ===";
extern int MLWindowSize = 50;              
extern int MLTrainingPeriod = 500;         
extern double MLConfidenceThreshold = 0.75;

// ✅ NEW: Adaptive ML Toggle
extern bool EnableMLAdaptation = true;

// Global Variables
double g_last_atr;
datetime g_last_trade_time;
double g_daily_risk_used;
bool g_news_filter_active;
int g_consecutive_losses;
double g_peak_balance;
double g_max_drawdown;
datetime g_last_daily_reset;

// ML Feature Arrays
double g_ml_features[][10];
double g_ml_labels[];
double g_ml_weights[10];

// Market State Enums
enum ENUM_MARKET_REGIME {
    REGIME_TRENDING_UP,
    REGIME_TRENDING_DOWN,
    REGIME_RANGING,
    REGIME_VOLATILE
};

enum ENUM_MARKET_CYCLE {
    CYCLE_ACCUMULATION,
    CYCLE_MARKUP,
    CYCLE_DISTRIBUTION,
    CYCLE_MARKDOWN
};

// Market State Variables
ENUM_MARKET_REGIME g_market_regime;
ENUM_MARKET_CYCLE g_market_cycle;
double g_regime_strength;
double g_cycle_progress;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    ArrayResize(g_ml_features, MLWindowSize);
    ArrayResize(g_ml_labels, MLWindowSize);
    for(int i = 0; i < 10; i++) {
        g_ml_weights[i] = 0.1 * (MathRand() / 32768.0 - 0.5);
    }

    g_last_trade_time = 0;
    g_daily_risk_used = 0;
    g_news_filter_active = false;
    g_consecutive_losses = 0;
    g_peak_balance = AccountBalance();
    g_max_drawdown = 0;
    g_last_daily_reset = 0;

    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    if(IsDayChanged()) {
        ResetDailyValues();
    }

    if(!IsNewBar()) return;

    UpdateMarketRegime();
    UpdateMarketCycle();
    UpdateMLFeatures();

    if(!CheckTradeAllowed()) return;
    ManageOpenPositions();

    if(CountOpenPositions() >= MaxPositions) return;

    double buy_signal = GetMLSignal(OP_BUY);
    double sell_signal = GetMLSignal(OP_SELL);

    if(buy_signal > MLConfidenceThreshold) {
        ExecuteMarketOrder(OP_BUY);
    }
    else if(sell_signal > MLConfidenceThreshold) {
        ExecuteMarketOrder(OP_SELL);
    }
}
//+------------------------------------------------------------------+
//| Calculate proper position size for XAUUSD                        |
//+------------------------------------------------------------------+
double CalculatePositionSize(double stop_distance)
{
    if(stop_distance <= 0) return 0;

    double account_balance = AccountBalance();
    double margin_required = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
    double tick_value = MarketInfo(Symbol(), MODE_TICKVALUE);
    double min_lot = MarketInfo(Symbol(), MODE_MINLOT);
    double max_lot = MarketInfo(Symbol(), MODE_MAXLOT);
    double lot_step = MarketInfo(Symbol(), MODE_LOTSTEP);

    double risk_amount = account_balance * (RiskPercent / 100.0);
    double risk_lots = risk_amount / (stop_distance * tick_value);
    double max_leverage_lots = AccountFreeMargin() / margin_required;

    double max_allowed_lots = MAX_INITIAL_LOTS;
    if(account_balance > INITIAL_BALANCE) {
        max_allowed_lots = MAX_INITIAL_LOTS * 
            (1 + (account_balance - INITIAL_BALANCE) / INITIAL_BALANCE) * 0.2;
    }

    double final_lots = MathMin(risk_lots, max_leverage_lots);
    final_lots = MathMin(final_lots, max_allowed_lots);
    final_lots = NormalizeDouble(MathFloor(final_lots / lot_step) * lot_step, 2);
    final_lots = MathMax(final_lots, min_lot);
    final_lots = MathMin(final_lots, max_lot);

    if(final_lots * margin_required > AccountFreeMargin() * 0.8) {
        Print("Warning: Required margin would exceed 80% of free margin");
        return 0;
    }

    return final_lots;
}

//+------------------------------------------------------------------+
//| Execute market order with proper risk management                 |
//+------------------------------------------------------------------+
void ExecuteMarketOrder(int cmd)
{
    if(!CheckTradeAllowed()) return;

    double entry_price = (cmd == OP_BUY) ? Ask : Bid;
    double sl = CalculateStopLoss(cmd, entry_price);
    double tp = CalculateTakeProfit(cmd, entry_price);
    double lots = CalculatePositionSize(MathAbs(entry_price - sl));

    if(lots == 0) {
        Print("Invalid lot size calculated");
        return;
    }

    double margin_needed = MarketInfo(Symbol(), MODE_MARGINREQUIRED) * lots;
    if(margin_needed > AccountFreeMargin() * 0.8) {
        Print("Insufficient margin for trade. Required: ", margin_needed,
              " Available: ", AccountFreeMargin());
        return;
    }

    int ticket = OrderSend(Symbol(), cmd, lots, entry_price, 3, sl, tp,
                          EA_NAME, MAGIC_NUMBER, 0, cmd == OP_BUY ? clrBlue : clrRed);

    if(ticket > 0) {
        g_last_trade_time = TimeCurrent();
        g_daily_risk_used += RiskPercent;
        LogTradeExecution(cmd, lots, entry_price, sl, tp);
        if (EnableMLAdaptation) AdaptMLWeights(cmd, 1.0);  // ✅ Learning success
    }
    else {
        Print("Order failed. Error: ", GetLastError());
        if (EnableMLAdaptation) AdaptMLWeights(cmd, 0.0);  // ✅ Learning fail
    }
}

//+------------------------------------------------------------------+
//| SL/TP Calculation                                                |
//+------------------------------------------------------------------+
double CalculateStopLoss(int cmd, double entry_price)
{
    double atr = iATR(Symbol(), PrimaryTimeframe, 14, 0);
    g_last_atr = atr;

    double sl_distance = atr * 1.5;

    switch(g_market_regime) {
        case REGIME_VOLATILE: sl_distance *= 1.5; break;
        case REGIME_RANGING: sl_distance *= 0.8; break;
    }

    return (cmd == OP_BUY) ? entry_price - sl_distance : entry_price + sl_distance;
}

double CalculateTakeProfit(int cmd, double entry_price)
{
    double sl = CalculateStopLoss(cmd, entry_price);
    double sl_distance = MathAbs(entry_price - sl);
    double tp_distance = sl_distance * 1.5;

    switch(g_market_regime) {
        case REGIME_TRENDING_UP:
        case REGIME_TRENDING_DOWN:
            tp_distance *= 2.0;
            break;
        case REGIME_RANGING:
            tp_distance *= 1.2;
            break;
    }

    return (cmd == OP_BUY) ? entry_price + tp_distance : entry_price - tp_distance;
}

//+------------------------------------------------------------------+
//| Manage Open Positions                                            |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
    for(int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
        if(OrderSymbol() != Symbol() || OrderMagicNumber() != MAGIC_NUMBER) continue;

        bool modified = false;

        if(UseBreakEven) modified = ManageBreakEven(OrderTicket());
        if(UseTrailingStop && !modified) ManageTrailingStop(OrderTicket());
    }
}
//+------------------------------------------------------------------+
//| Trade management functions                                       |
//+------------------------------------------------------------------+
bool ManageBreakEven(int ticket)
{
    if(!OrderSelect(ticket, SELECT_BY_TICKET)) return false;

    double be_level = g_last_atr * BreakEvenActivation;
    double be_profit = g_last_atr * BreakEvenProfit;

    if(OrderType() == OP_BUY &&
       Bid >= OrderOpenPrice() + be_level &&
       OrderStopLoss() < OrderOpenPrice() + be_profit)
    {
        return OrderModify(ticket, OrderOpenPrice(), OrderOpenPrice() + be_profit,
                           OrderTakeProfit(), 0, clrBlue);
    }
    else if(OrderType() == OP_SELL &&
            Ask <= OrderOpenPrice() - be_level &&
            OrderStopLoss() > OrderOpenPrice() - be_profit)
    {
        return OrderModify(ticket, OrderOpenPrice(), OrderOpenPrice() - be_profit,
                           OrderTakeProfit(), 0, clrRed);
    }

    return false;
}

bool ManageTrailingStop(int ticket)
{
    if(!OrderSelect(ticket, SELECT_BY_TICKET)) return false;

    double trail_level = g_last_atr * TrailingActivation;
    double trail_distance = g_last_atr * TrailingDistance;

    if(OrderType() == OP_BUY)
    {
        double new_sl = Bid - trail_distance;
        if(Bid >= OrderOpenPrice() + trail_level &&
           (OrderStopLoss() < new_sl || OrderStopLoss() == 0))
        {
            return OrderModify(ticket, OrderOpenPrice(), new_sl, OrderTakeProfit(), 0, clrBlue);
        }
    }
    else if(OrderType() == OP_SELL)
    {
        double new_sl = Ask + trail_distance;
        if(Ask <= OrderOpenPrice() - trail_level &&
           (OrderStopLoss() > new_sl || OrderStopLoss() == 0))
        {
            return OrderModify(ticket, OrderOpenPrice(), new_sl, OrderTakeProfit(), 0, clrRed);
        }
    }

    return false;
}


//+------------------------------------------------------------------+
//| Market analysis functions                                        |
//+------------------------------------------------------------------+
void UpdateMarketRegime()
{
    double ma_fast = iMA(Symbol(), PrimaryTimeframe, 20, 0, MODE_EMA, PRICE_CLOSE, 0);
    double ma_slow = iMA(Symbol(), PrimaryTimeframe, 50, 0, MODE_EMA, PRICE_CLOSE, 0);
    double atr = iATR(Symbol(), PrimaryTimeframe, 14, 0);
    double atr_avg = 0;

    for(int i = 0; i < 14; i++) {
        atr_avg += iATR(Symbol(), PrimaryTimeframe, 14, i);
    }
    atr_avg /= 14;

    double volatility_index = atr / atr_avg;
    double trend_strength = MathAbs(ma_fast - ma_slow) / Point;

    if(volatility_index > 1.5) {
        g_market_regime = REGIME_VOLATILE;
    }
    else if(trend_strength > 100) {
        g_market_regime = (ma_fast > ma_slow) ? REGIME_TRENDING_UP : REGIME_TRENDING_DOWN;
    }
    else {
        g_market_regime = REGIME_RANGING;
    }

    g_regime_strength = trend_strength * volatility_index;
}

void UpdateMarketCycle()
{
    double momentum = iMomentum(Symbol(), PrimaryTimeframe, 14, PRICE_CLOSE, 0);
    double volume = iVolume(Symbol(), PrimaryTimeframe, 0);
    double avg_volume = 0;

    for(int i = 1; i <= 20; i++) {
        avg_volume += iVolume(Symbol(), PrimaryTimeframe, i);
    }
    avg_volume /= 20;

    if(momentum < 100 && volume > avg_volume) {
        g_market_cycle = CYCLE_ACCUMULATION;
    }
    else if(momentum > 100 && volume > avg_volume) {
        g_market_cycle = CYCLE_MARKUP;
    }
    else if(momentum > 100 && volume < avg_volume) {
        g_market_cycle = CYCLE_DISTRIBUTION;
    }
    else {
        g_market_cycle = CYCLE_MARKDOWN;
    }

    g_cycle_progress = (volume / avg_volume) * 100;
}

void UpdateMLFeatures()
{
    for(int i = MLWindowSize-1; i > 0; i--) {
        for(int j = 0; j < 10; j++) {
            g_ml_features[i][j] = g_ml_features[i-1][j];
        }
    }

    g_ml_features[0][0] = NormalizeValue(iMACD(Symbol(), PrimaryTimeframe, 12, 26, 9, PRICE_CLOSE, MODE_MAIN, 0));
    g_ml_features[0][1] = NormalizeValue(iRSI(Symbol(), PrimaryTimeframe, 14, PRICE_CLOSE, 0));
    g_ml_features[0][2] = NormalizeValue(iStochastic(Symbol(), PrimaryTimeframe, 5, 3, 3, MODE_SMA, 0, MODE_MAIN, 0));
    g_ml_features[0][3] = NormalizeValue(g_regime_strength);
    g_ml_features[0][4] = (double)g_market_regime / 3;
    g_ml_features[0][5] = (double)g_market_cycle / 3;
    g_ml_features[0][6] = g_cycle_progress / 100;
    g_ml_features[0][7] = iATR(Symbol(), PrimaryTimeframe, 14, 0) / Point;
    g_ml_features[0][8] = (Close[0] - iLow(Symbol(), PrimaryTimeframe, iLowest(Symbol(), PrimaryTimeframe, MODE_LOW, 20, 0))) /
                          (iHigh(Symbol(), PrimaryTimeframe, iHighest(Symbol(), PrimaryTimeframe, MODE_HIGH, 20, 0)) - 
                           iLow(Symbol(), PrimaryTimeframe, iLowest(Symbol(), PrimaryTimeframe, MODE_LOW, 20, 0)));
    g_ml_features[0][9] = NormalizeValue(iMomentum(Symbol(), PrimaryTimeframe, 14, PRICE_CLOSE, 0));
}

//+------------------------------------------------------------------+
//| Signal logic                                                     |
//+------------------------------------------------------------------+
double GetMLSignal(int cmd)
{
    double signal = 0;
    for(int i = 0; i < 10; i++) {
        signal += g_ml_features[0][i] * g_ml_weights[i];
    }

    signal = 1.0 / (1.0 + MathExp(-signal));

    // ✅ Enhanced SELL treatment
    switch(g_market_regime) {
        case REGIME_TRENDING_UP:
            if(cmd == OP_BUY) signal *= 1.2;
            else signal *= 1.0;
            break;
        case REGIME_TRENDING_DOWN:
            if(cmd == OP_SELL) signal *= 1.3;
            else signal *= 0.9;
            break;
        case REGIME_VOLATILE:
            signal *= 1.0;
            break;
    }

    return signal;
}

//+------------------------------------------------------------------+
//| Adaptive ML weight adjustment                                    |
//+------------------------------------------------------------------+
void AdaptMLWeights(int cmd, double outcome)
{
    double prediction = GetMLSignal(cmd);
    double error = outcome - prediction;
    double learning_rate = 0.01;

    for(int i = 0; i < 10; i++) {
        g_ml_weights[i] += learning_rate * error * g_ml_features[0][i];
    }
}

//+------------------------------------------------------------------+
//| Normalize Value Fix                                              |
//+------------------------------------------------------------------+
double NormalizeValue(double value)
{
    double norm = (value - 50.0) / 50.0;
    return MathMax(-1.0, MathMin(1.0, norm));
}

//+------------------------------------------------------------------+
//| Other Helper Functions                                           |
//+------------------------------------------------------------------+
bool IsNewBar()
{
    static datetime last_bar_time = 0;
    datetime current_bar_time = iTime(Symbol(), PrimaryTimeframe, 0);

    if(current_bar_time != last_bar_time) {
        last_bar_time = current_bar_time;
        return true;
    }
    return false;
}

bool IsDayChanged()
{
    static datetime last_day = 0;
    datetime current_time = TimeCurrent();

    if(TimeDay(current_time) != TimeDay(last_day)) {
        last_day = current_time;
        return true;
    }
    return false;
}

void ResetDailyValues()
{
    g_daily_risk_used = 0;
    g_news_filter_active = false;
}

bool CheckTradeAllowed()
{
    if(!IsTradeAllowed()) return false;
    if(IsTradeContextBusy()) return false;
    if(g_daily_risk_used >= MaxDailyRisk) return false;

    double spread = MarketInfo(Symbol(), MODE_SPREAD);
    if(spread > MaxSpread) {
        Print("Spread too high: ", spread);
        return false;
    }

    return true;
}

int CountOpenPositions()
{
    int count = 0;
    for(int i = 0; i < OrdersTotal(); i++) {
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MAGIC_NUMBER) {
                count++;
            }
        }
    }
    return count;
}

void LogTradeExecution(int cmd, double lots, double entry, double sl, double tp)
{
    string direction = (cmd == OP_BUY) ? "BUY" : "SELL";
    Print("=== Trade Execution ===");
    Print("Direction: ", direction);
    Print("Lots: ", DoubleToString(lots, 2));
    Print("Entry: ", DoubleToString(entry, Digits));
    Print("Stop Loss: ", DoubleToString(sl, Digits));
    Print("Take Profit: ", DoubleToString(tp, Digits));
    Print("Market Regime: ", g_market_regime);
    Print("Market Cycle: ", g_market_cycle);
    Print("=====================");
}
//+------------------------------------------------------------------+
